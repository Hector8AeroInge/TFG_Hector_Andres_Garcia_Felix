
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

import tkinter
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, ttk, filedialog, scrolledtext, messagebox, Frame, Scrollbar
import tkintermapview
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.figure import Figure
import pandas as pd
from PIL import Image, ImageTk
from matplotlib.animation import FuncAnimation

import numpy as np
import pandas as pd
import subprocess
import time
import sys
import os
import queue
import math


# Obtiene la ruta del directorio actual (carpeta_scripts)
script_dir = os.path.dirname(os.path.abspath(__file__))
# Construye la ruta al directorio del paquete (carpeta_modulos)
paquete_dir = os.path.join(script_dir, '..', 'Swarm')
# Añade el directorio del paquete al sys.path
sys.path.append(paquete_dir)

# Obtiene la ruta del directorio actual (carpeta_scripts)
script_dir = os.path.dirname(os.path.abspath(__file__))
# Construye la ruta al directorio del paquete (carpeta_modulos)
paquete_dir = os.path.join(script_dir, '..', 'Algorithm')
# Añade el directorio del paquete al sys.path
sys.path.append(paquete_dir)



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0"

global traffics
traffics = []
panelDrones = []
subprocess_list = []
ani_path = ""
requested_to_run_agents = []
trafficsSorted = []
start_stop_status = 0
animation_loaded = 0

import sim_init
import main
import DrawingTools
import geo_functions

class ConsoleRedirector:
    def __init__(self, widget, tag):
        self.widget = widget
        self.tag = tag

    def write(self, s):
        self.widget.insert(tkinter.END, s, (self.tag,))
        self.widget.see(tkinter.END)

class panel_drone:
    def __init__(self, id, lat, lon, alt, waypoints, map_widget, conflictRadius, velocity, currentWaypoint, priority):
        
        self.id = id
        self.lat = lat
        self.lon = lon
        self.alt = alt
        self.position = [self.lat,self.lon,self.alt]
        #x,y,z = geo_functions.lla_to_ecef(self.position[0],self.position[1],self.position[2])
        #self.position_ecef = [x,y]
        self.velocity = velocity
        self.currentWaypoint = currentWaypoint
        self.priority = priority

        self.subnet = "none"
        self.subnet_color = ""

        self.conflictRadius = float(conflictRadius)

        self.color = DrawingTools.get_random_color()
        self.waypoints_3D = sim_init.decode_flight_plan(waypoints)
        self.waypoints = [(float(x), float(y)) for x, y, _ in self.waypoints_3D]
        self.new_waypoints = []
    
        self.map_widget = map_widget
        self.marker = self.map_widget.set_marker(lat, lon, text=str(f"{self.id}"),marker_color_outside = self.color)
        self.marker_circle_color = '#000000'

        self.map_path = self.map_widget.set_path(self.waypoints,color=self.color,width=2)
        self.map_recalculated_path = self.map_widget.set_path([(0,0),(0,0)], color=self.color)
        
        self.map_circle_distance = self.map_widget.set_path(generate_circle_path(self.position, self.conflictRadius, 360)
                                                            ,width=2,
                                                            color="#ff0000")
        #self.map_circle_distance.borderwidth=20
        self.all_own_markers=[]
        self.all_own_circles=[]



    def update_data(self,lat,lon,alt,currentWaypoint,subnet):
       
        self.lat = lat
        self.lon = lon
        self.alt = alt
        self.position = [lat,lon,alt]
        self.currentWaypoint = currentWaypoint
        self.subnet = subnet

        if subnet != 'none':
           self.subnet_color = DrawingTools.subnet_color(int(subnet))
           self.marker.marker_color_circle = self.subnet_color
        else:
            self.marker.marker_color_circle = '#000000'


        self.marker.delete()
        self.map_circle_distance.delete()

        #Delete all previous own waypoints
        for marker in self.all_own_markers:
            marker.delete()

        for circle in self.all_own_circles:
            circle.delete()

        self.marker = self.map_widget.set_marker(lat, lon, text=str(f"{self.id}"),marker_color_outside = self.color)
        self.marker.marker_color_circle = self.marker_circle_color
        
        self.map_circle_distance = self.map_widget.set_path(generate_circle_path(self.position, self.conflictRadius, 360)
                                                            ,width=2,color="#ff0000")
        
        self.all_own_markers.append(self.marker)
        self.all_own_circles.append(self.map_circle_distance)

def generate_circle_path(center,radius,num_points):
    points=[]
    for i in range(num_points):
        angle = 2 * math.pi * i / num_points

        #radius_angle = (180 / math.pi) * (radius / 6371000)  
        lat_radius = radius / 111320 
        lon_radius = radius / (111320 * math.cos(math.radians(center[0])))

        lat = center[0] + lat_radius * math.cos(angle)
        lon = center[1] + lon_radius * math.sin(angle)
        points.append((lat,lon))

    return points



def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def select_waypoint_file():
    file_selected = filedialog.askopenfilename(title="Select .waypoint file", filetypes=[("Waypoints files","*.waypoints"), ("All files", "*.*")])
    entry_10.delete(0 ,tkinter.END)
    entry_10.insert(0, file_selected)

def add_drone_button_clicked():

    global traffics
    global map_widget
    argvs = []
    global entry_1; global entry_2; global entry_3; global entry_4; global entry_5; global entry_6; global entry_7; global entry_8; global entry_9; global entry_10
    
    #Condiciones para asegurar que sea correcto
    droneid = entry_9.get() #DroneID         0
    connection_port = entry_5.get() #Connection port 1
    velocity = entry_7.get() #Cruise Velocity 2
    flight_plan = entry_10.get() #Flight Plan    3
    conflict_radius = entry_6.get() #Conflict Radius 4
    priority = entry_8.get() #Priority        5
    delta_t = entry_4.get() #Delta_t         6
    safe_factor = entry_3.get() #Safe_factor     7 
    link_distance = entry_2.get() #Link distance   8
    time_horizon = entry_1.get() #Time horizon    9

    argvs = [droneid,connection_port,velocity,flight_plan,conflict_radius,priority,delta_t,safe_factor,link_distance,time_horizon]
    traffics.append(argvs)

    entry_10.delete(0 ,tkinter.END)
    entry_10.insert(0,"Select .waypoint file")

    new_connection_port = int(connection_port) + 10
    entry_5.delete(0 ,tkinter.END)
    entry_5.insert(0,str(new_connection_port))

    new_priority = int(priority) + 1
    entry_8.delete(0 ,tkinter.END)
    entry_8.insert(0,str(new_priority))

    correct_inputs_flag = 0

    if os.path.exists(flight_plan):                                
        correct_inputs_flag = 1
        print(f"{droneid} using Flight plan located at {flight_plan}")
        

    else:
        correct_inputs_flag = 0
        messagebox.showerror("Error",".waypoints path file not found")
        print(".waypoints file not found")

    if correct_inputs_flag == 1:

        panelDrones.append(panel_drone(droneid,0,0,0,flight_plan,map_widget,conflict_radius,velocity,"0",priority))
        print(f"Added {droneid} to the simulation")
    #Preparar inputs del siguiente
    

def start_simulation_button_click():

    #Relative path to AutopilotService.py
    script_dir = os.path.dirname(os.path.abspath(__file__))
    build_folder_path = os.path.dirname(script_dir)
    AutopilotService_folder = os.path.join(build_folder_path, 'Swarm')
    AutopilotService_filename = "AutopilotService_V_0_5.py"
    py_file_path = os.path.join(AutopilotService_folder,AutopilotService_filename)
    print(py_file_path)

    global traffics

    external_broker = "classpip_cred"
    username = "dronsEETAC" ; password = "mimara1456."
    connection_mode = "global" ; operation_mode = "simulation"
    log_Flight_Plan_Flag = "1"

    for drone in traffics:
        init_argvs = [connection_mode, operation_mode, external_broker, username,password, 
                      drone[0],drone[1],drone[5],log_Flight_Plan_Flag,drone[2],drone[4],
                      drone[8],drone[7],drone[6],drone[9],drone[3]]
        
        command = ["start", "cmd", "/k", "python", f"{py_file_path}"] + init_argvs
        command_str = ' '.join(command)

        process = subprocess.Popen(command_str, shell=True)
        subprocess_list.append(process)
        time.sleep(2)

        print(f"Initialized {drone[0]} AutopilotService")

def stop_simulation_button_click():
    global subprocess_list
    for process in subprocess_list:
        process.terminate()

    subprocess_list= []
    print("All simulation instances closed")


from paho.mqtt.client import ssl
import threading
import paho.mqtt.client as mqtt
import json


def on_connect(external_client, userdata, flags, rc):
    if rc==0:
        print("MQTT_Listener for panel connected OK")
    else:
        print("MQTT_Listener Bad connection")


def update_drone_data(id,lat,lon,alt,currentWaypoint,subnet):
    global panelDrones
    for drone in panelDrones:
        if drone.id == id:
            drone.update_data(lat,lon,alt,currentWaypoint,subnet)


def telemetryInfo_function(message):

    global ani
    
    payload_json = json.loads(message.payload.decode())
    sender_id = payload_json.get('id') 
    lat = payload_json.get('lat') 
    lon = payload_json.get('lon')
    alt = payload_json.get('altitude')
    currentWaypoint = payload_json.get('currentWP')
    subnet = payload_json.get('NW_subNet')

    try:
        ani.pause()
    except:
        pass

    update_drone_data(sender_id,lat,lon,alt,currentWaypoint,subnet)
    print(f"{sender_id} map position updated")

    
    try:
        Tk.update(window)
        ani.resume()
    except:
        pass

def Start_Stop_animation():

    global animation_loaded

    if animation_loaded == 0:
        show_simulation_animation()
        animation_loaded = 1

    global ani

    try:
        if start_stop_status == 1:

            ani.pause()
            start_stop_status = 0
            print("Animation stoped")

        elif start_stop_status == 0:

            ani.resume()
            start_stop_status = 1
            print("Animation resumed")
    except:
        print("No animation loaded")



def show_simulation_animation():

    global trafficsSorted

    centre_x, centre_y, centre_z = trafficsSorted[0].startPoint.x,trafficsSorted[0].startPoint.y,trafficsSorted[0].startPoint.z
    link_distance = int(traffics[0][8])

    animation_axis = fig.add_subplot(111, projection='3d')
    animation_axis.set_xlim(centre_x - link_distance, centre_x + link_distance)
    animation_axis.set_ylim(centre_y - link_distance, centre_y + link_distance)
    animation_axis.set_zlim(centre_z - link_distance, centre_z + link_distance)

    points = [animation_axis.plot([], [], [], marker='o', markersize=6 ,label=trafficsSorted[i].id)[0] for i in range(len(trafficsSorted))]
    frames = max(len(drone.path) for drone in trafficsSorted) if trafficsSorted else 0
    
    for drone in trafficsSorted:
        drone.path = drone.path + [drone.path[-1]] * (frames - len(drone.path))
    

    figure_center = [trafficsSorted[0].position.x,trafficsSorted[0].position.y,trafficsSorted[0].position.z]
    print(trafficsSorted[0].position.pretty_print_point())

    # Inicializa los puntos de la animación
    def init():
        animation_axis.legend()
        '''for drones in trafficsSorted:
            drone.set_Path_As_Route()
            for lines in drones.route:
                DrawingTools.add_line_to_figure(animation_axis,lines,drones.id)
        '''

        return points,

    # Actualiza los puntos en cada cuadro de la animación
    def update(frame):

        Tk.update(window) 
        #window.update_idletasks()
        for i, drone in enumerate(trafficsSorted):
            
            x = np.array(drone.path[frame].x,)
            y = drone.path[frame].y
            z = drone.path[frame].z
            
            points[i].set_data(x,y)
            points[i].set_3d_properties(z)

        return points,
    
    # Configura la animación

    def init_animation():
        global ani
        ani = FuncAnimation(fig, update, frames=frames, init_func=init , blit=False, repeat=True, interval=250, cache_frame_data=False,)
        chart_canvas.draw()

    try:
        ani_thread.join()
        ani_thread = threading.Thread(target=init_animation)
        ani_thread.start()
    except:
        ani_thread = threading.Thread(target=init_animation)
        ani_thread.start()

def panel_simulation_function(message):

    global requested_to_run_agents
    global animation_axis
    global ani_thread
    global ani  
    global animation_loaded
    global trafficsSorted

    try:
        del ani
    except: pass

    #fig.clf()
    try:
        fig.delaxes(fig.axes[0])
    except: pass

    builded_simulation_drones = []
    payload_json = json.loads(message.payload.decode())
    sender = payload_json.get("sender")
    simulation_drones_rx = payload_json.get("drones")
    parameters = payload_json.get("parameters")

    requested_to_run_agents.append(sender)

    if set(requested_to_run_agents) == set(simulation_drones_rx):

        requested_to_run_agents=[]

        for drone in panelDrones:
            if drone.id in simulation_drones_rx:
                print(drone.position)
                builded_simulation_drones.append(sim_init.build_drone(drone.id,drone.position,drone.waypoints_3D,drone.velocity,
                                                                    drone.conflictRadius,drone.priority,drone.currentWaypoint))

        principal_process_interruption = threading.Event()
        traces_file_path, trafficsSorted = main.simulate_panel(builded_simulation_drones,[],parameters[0],parameters[1],"1","1",principal_process_interruption)
        
        #Set modified path by RHO
        for drone in trafficsSorted:

            if drone.RHO_applied: 

                print(f"Showing {drone.id} new route")

                #Plot recalculated path in yellow color
                LLA_solution_waypoints = []

                for waypoint in drone.solution_waypoints:

                    lat,lon,alt = geo_functions.ecef_to_lla(waypoint.x,waypoint.y,waypoint.z)
                    LLA_solution_waypoints.append((lat,lon))


                map_widget.set_path(LLA_solution_waypoints,
                                    color='#fffb00',width=2)
        
        print(f"Excel traces file path: {traces_file_path}")
        animation_loaded = 0

        if traces_file_path != -1 != -2:
            print("Showing simulation animation") 
            print("Tabulating simulation traces")
            load_excel(traces_file_path)


def process_message(message, client):

    global op_mode
    global state
    global traffics
    #global telemetryInfo_thread
    global simulationStarted

    splited = message.topic.split("/")
    command = splited[2]
    print (f'panel receiving command: {command}')

    if command == "simulationStarted":
        try:
            simulationStarted.join()
            simulationStarted = threading.Thread(target=panel_simulation_function,args=(message,))
            simulationStarted.start()
        except:    
            simulationStarted = threading.Thread(target=panel_simulation_function,args=(message,))
            simulationStarted.start()

    if command == "telemetryInfo":
       
       window.update_idletasks()
    
       try:
            telemetryInfo_thread.join()
            telemetryInfo_thread = threading.Thread(target=telemetryInfo_function,args=(message,))
            telemetryInfo_thread.start()
       except:
            telemetryInfo_thread = threading.Thread(target=telemetryInfo_function,args=(message,))
            telemetryInfo_thread.start()

def on_internal_message(client, userdata, message):
    #global internal_client
    process_internal_message_thread = threading.Thread(target=process_message, args=(message, internal_client))
    process_internal_message_thread.start()


def on_external_message(client, userdata, message):
    #global external_client
    process_external_message_thread = threading.Thread(target=process_message, args=(message, external_client))
    process_external_message_thread.start()
   


connection_mode = "global" ; operation_mode = "simulation"; external_broker = "classpip_cred"; username = "dronsEETAC" ; password = "mimara1456."
global op_mode
global external_client
global internal_client
global state

state = 'disconnected'
print("***********************************************")
print ('Connection mode: ', connection_mode)
print ('Operation mode: ', operation_mode)
op_mode = operation_mode

#Open internal client
internal_client_name = "Autopilot_internal_panel"
internal_client = mqtt.Client(internal_client_name)
internal_client.on_message = on_internal_message
internal_client.on_connect = on_connect

#Open external client
external_client_name = "Autopilot_external_panel"
external_client = mqtt.Client(external_client_name, transport="websockets")
external_client.on_message = on_external_message
external_client.on_connect = on_connect

if connection_mode== "global":
    if external_broker == "hivemq":
        external_client.connect("broker.hivemq.com", 8000)
        print('Connected to broker.hivemq.com:8000')

    elif external_broker == "hivemq_cert":
        external_client.tls_set(ca_certs=None, certfile=None, keyfile=None, cert_reqs=ssl.CERT_REQUIRED,
                        tls_version=ssl.PROTOCOL_TLS, ciphers=None)
        external_client.connect("broker.hivemq.com", 8884)
        print('Connected to broker.hivemq.com:8884')

    elif external_broker == "classpip_cred":
        external_client.username_pw_set(
            username, password
        )
        external_client.connect("classpip.upc.edu", 8000)
        print('Connected to classpip.upc.edu:8000')

    elif external_broker == "classpip_cert":
        external_client.username_pw_set(
            username, password
        )
        external_client.tls_set(ca_certs=None, certfile=None, keyfile=None, cert_reqs=ssl.CERT_REQUIRED,
                        tls_version=ssl.PROTOCOL_TLS, ciphers=None)
        external_client.connect("classpip.upc.edu", 8883)
        print('Connected to classpip.upc.edu:8883')
    elif external_broker == "localhost":
        external_client.connect("localhost", 8000)
        print('Connected to localhost:8000')
    elif external_broker == "localhost_cert":
        print('Not implemented yet')

elif connection_mode == "local":
    if operation_mode == "simulation":
        #external_client.connect("localhost", 1884)
        internal_client.connect("localhost", 1884)
        print('Connected to localhost:1884')
    else:
        external_client.connect("10.10.10.1", 8000)
        print('Connected to 10.10.10.1:8000')

if connection_mode== "global":

    external_client.subscribe("$SYS/broker/clients/connected")
    external_client.subscribe(f"+/traffic/#")
    external_client.subscribe(f"+/panel/#")
    print("panel MQTT subscribed to +/traffic/#")

elif connection_mode== "local":

    internal_client.subscribe("$SYS/broker/clients/connected")
    internal_client.subscribe("+/traffic/#")


def load_excel(traces_file_path):
    try:
        df = pd.read_excel(traces_file_path)

        #Clear treeview
        tree.delete(*tree.get_children())
        tree['column'] = list(df.columns)
        tree['show'] = 'headings'
        
        #Show headers
        for col in tree['column']:
            tree.heading(col, text=col)

        df_rows = df.to_numpy().tolist()
        for row in df_rows:
            tree.insert("","end",values=row)
    except Exception as e:
        messagebox.showerror(f"Error ocurring displaying excel traces: {e}")




window = Tk()
window.geometry("1216x781")
window.configure(bg = "#CEEAF9")
window.title("DCAS Panel")


canvas = Canvas(
    window,
    bg = "#CEEAF9",
    height = 781,
    width = 1216,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    150.0,
    269.520263671875,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    150.0,
    278.74859619140625,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    150.43569946289062,
    375.5943298339844,
    image=image_image_3
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    214.30804443359375,
    432.3398084640503,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=157.1039686203003,
    y=421.147705078125,
    width=114.40815162658691,
    height=20.384206771850586
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    93.81414794921875,
    377.9424743652344,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    87.423828125,
    406.1023254394531,
    image=image_image_5
)

entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    214.30804443359375,
    405.882230758667,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=157.1758098602295,
    y=394.6182861328125,
    width=114.26446914672852,
    height=20.527889251708984
)

entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    214.30804443359375,
    378.4518690109253,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=157.1039686203003,
    y=367.259765625,
    width=114.40815162658691,
    height=20.384206771850586
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    96.3197021484375,
    349.7826232910156,
    image=image_image_6
)

entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    214.30804443359375,
    350.2643995285034,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=157.1039686203003,
    y=339.0722961425781,
    width=114.40815162658691,
    height=20.384206771850586
)


image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    140.44610595703125,
    321.87554931640625,
    image=image_image_7
)

image_image_8 = PhotoImage(
    file=relative_to_assets("image_8.png"))
image_8 = canvas.create_image(
    88.67660522460938,
    432.0093994140625,
    image=image_image_8
)

image_image_9 = PhotoImage(
    file=relative_to_assets("image_9.png"))
image_9 = canvas.create_image(
    150.18923950195312,
    205.31846618652344,
    image=image_image_9
)

entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    214.30804443359375,
    181.31760692596436,
    image=entry_image_5
)
entry_5 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_5.place(
    x=157.1039686203003,
    y=170.12550354003906,
    width=114.40815162658691,
    height=20.384206771850586
)


entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    214.30804443359375,
    257.82407665252686,
    image=entry_image_6
)
entry_6 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_6.place(
    x=157.1039686203003,
    y=246.63197326660156,
    width=114.40815162658691,
    height=20.384206771850586
)


entry_image_7 = PhotoImage(
    file=relative_to_assets("entry_7.png"))
entry_bg_7 = canvas.create_image(
    214.309326171875,
    206.7206220626831,
    image=entry_image_7
)
entry_7 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_7.place(
    x=157.10525035858154,
    y=195.5285186767578,
    width=114.40815162658691,
    height=20.384206771850586
)


image_image_10 = PhotoImage(
    file=relative_to_assets("image_10.png"))
image_10 = canvas.create_image(
    91.43496704101562,
    157.19384765625,
    image=image_image_10
)

image_image_11 = PhotoImage(
    file=relative_to_assets("image_11.png"))
image_11 = canvas.create_image(
    77.0223388671875,
    179.72174072265625,
    image=image_image_11
)

image_image_12 = PhotoImage(
    file=relative_to_assets("image_12.png"))
image_12 = canvas.create_image(
    97.69891357421875,
    232.6622772216797,
    image=image_image_12
)

image_image_13 = PhotoImage(
    file=relative_to_assets("image_13.png"))
image_13 = canvas.create_image(
    83.5390625,
    258.56935119628906,
    image=image_image_13
)

entry_image_8 = PhotoImage(
    file=relative_to_assets("entry_8.png"))
entry_bg_8 = canvas.create_image(
    214.64862060546875,
    282.90835094451904,
    image=entry_image_8
)
entry_8 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_8.place(
    x=157.4445447921753,
    y=271.71624755859375,
    width=114.40815162658691,
    height=20.384206771850586
)


image_image_14 = PhotoImage(
    file=relative_to_assets("image_14.png"))
image_14 = canvas.create_image(
    108.5118408203125,
    281.77862548828125,
    image=image_image_14
)

image_image_15 = PhotoImage(
    file=relative_to_assets("image_15.png"))
image_15 = canvas.create_image(
    82.15985107421875,
    206.75518798828125,
    image=image_image_15
)

entry_image_9 = PhotoImage(
    file=relative_to_assets("entry_9.png"))
entry_bg_9 = canvas.create_image(
    214.30804443359375,
    155.61721324920654,
    image=entry_image_9
)
entry_9 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_9.place(
    x=157.1039686203003,
    y=144.42510986328125,
    width=114.40815162658691,
    height=20.384206771850586
)

image_image_16 = PhotoImage(
    file=relative_to_assets("image_16.png"))
image_16 = canvas.create_image(
    144.96282958984375,
    128.28677368164062,
    image=image_image_16
)

image_image_17 = PhotoImage(
    file=relative_to_assets("image_17.png"))
image_17 = canvas.create_image(
    150.0,
    83.520263671875,
    image=image_image_17
)

image_image_18 = PhotoImage(
    file=relative_to_assets("image_18.png"))
image_18 = canvas.create_image(
    149.98516845703125,
    84.35739135742188,
    image=image_image_18
)

image_image_19 = PhotoImage(
    file=relative_to_assets("image_19.png"))
image_19 = canvas.create_image(
    513.8917846679688,
    269.520263671875,
    image=image_image_19
)

image_image_20 = PhotoImage(
    file=relative_to_assets("image_20.png"))
image_20 = canvas.create_image(
    515.2945251464844,
    278.74859619140625,
    image=image_image_20
)

image_image_21 = PhotoImage(
    file=relative_to_assets("image_21.png"))
image_21 = canvas.create_image(
    515.2945251464844,
    82.74859619140625,
    image=image_image_21
)

image_image_22 = PhotoImage(
    file=relative_to_assets("image_22.png"))
image_22 = canvas.create_image(
    541.3755798339844,
    82.10458374023438,
    image=image_image_22
)

image_image_23 = PhotoImage(
    file=relative_to_assets("image_23.png"))
image_23 = canvas.create_image(
    360.0,
    643.7892150878906,
    image=image_image_23
)

image_image_24 = PhotoImage(
    file=relative_to_assets("image_24.png"))
image_24 = canvas.create_image(
    360.0,
    524.0624084472656,
    image=image_image_24
)

image_image_25 = PhotoImage(
    file=relative_to_assets("image_25.png"))
image_25 = canvas.create_image(
    364.2453918457031,
    521.5046691894531,
    image=image_image_25
)

image_image_26 = PhotoImage(
    file=relative_to_assets("image_26.png"))
image_26 = canvas.create_image(
    972.3063354492188,
    277.19500732421875,
    image=image_image_26
)

image_image_27 = PhotoImage(
    file=relative_to_assets("image_27.png"))
image_27 = canvas.create_image(
    973.0,
    82.78921508789062,
    image=image_image_27
)

image_image_28 = PhotoImage(
    file=relative_to_assets("image_28.png"))
image_28 = canvas.create_image(
    995.885009765625,
    81.85183715820312,
    image=image_image_28
)

image_image_29 = PhotoImage(
    file=relative_to_assets("image_29.png"))
image_29 = canvas.create_image(
    974.0,
    643.7892150878906,
    image=image_image_29
)

image_image_30 = PhotoImage(
    file=relative_to_assets("image_30.png"))
image_30 = canvas.create_image(
    974.4793701171875,
    524.0624084472656,
    image=image_image_30
)

image_image_31 = PhotoImage(
    file=relative_to_assets("image_31.png"))
image_31 = canvas.create_image(
    987.8516235351562,
    521.9383544921875,
    image=image_image_31
)

image_image_32 = PhotoImage(
    file=relative_to_assets("image_32.png"))
image_32 = canvas.create_image(
    256.50018310546875,
    127.94023132324219,
    image=image_image_32
)

image_image_33 = PhotoImage(
    file=relative_to_assets("image_33.png"))
image_33 = canvas.create_image(
    254.25204467773438,
    316.7351379394531,
    image=image_image_33
)

image_image_34 = PhotoImage(
    file=relative_to_assets("image_34.png"))
image_34 = canvas.create_image(
    36.777587890625,
    83.49447631835938,
    image=image_image_34
)

image_image_35 = PhotoImage(
    file=relative_to_assets("image_35.png"))
image_35 = canvas.create_image(
    766.3369750976562,
    83.49447631835938,
    image=image_image_35
)

image_image_36 = PhotoImage(
    file=relative_to_assets("image_36.png"))
image_36 = canvas.create_image(
    350.15643310546875,
    83.49447631835938,
    image=image_image_36
)

image_image_37 = PhotoImage(
    file=relative_to_assets("image_37.png"))
image_37 = canvas.create_image(
    766.3369750976562,
    523.8883361816406,
    image=image_image_37
)

image_image_38 = PhotoImage(
    file=relative_to_assets("image_38.png"))
image_38 = canvas.create_image(
    37.31396484375,
    523.124755859375,
    image=image_image_38
)

canvas.create_rectangle(
    0.0,
    0.237518310546875,
    1216.506103515625,
    61.06281280517578,
    fill="#398FC0",
    outline="")

image_image_39 = PhotoImage(
    file=relative_to_assets("image_39.png"))
image_39 = canvas.create_image(
    489.8601379394531,
    31.1787109375,
    image=image_image_39
)

image_image_40 = PhotoImage(
    file=relative_to_assets("image_40.png"))
image_40 = canvas.create_image(
    166.39886474609375,
    30.0679931640625,
    image=image_image_40
)

image_image_41 = PhotoImage(
    file=relative_to_assets("image_41.png"))
image_41 = canvas.create_image(
    40.28399658203125,
    31.1834716796875,
    image=image_image_41
)

canvas.create_rectangle(
    268.61051770234457,
    -0.829049825668335,
    271.92669677734375,
    65.49452209472656,
    fill="#8AB4CC",
    outline="")

canvas.create_rectangle(
    698.4275343039071,
    -0.82596755027771,
    701.7437133789062,
    65.49760437011719,
    fill="#8AB4CC",
    outline="")

entry_image_10 = PhotoImage(
    file=relative_to_assets("entry_10.png"))
entry_bg_10 = canvas.create_image(
    214.30804443359375,
    232.49285697937012,
    image=entry_image_10
)
entry_10 = Entry(
    bd=0,
    bg="#CFEAF9",
    fg="#000716",
    highlightthickness=0
)
entry_10.place(
    x=157.1758098602295,
    y=221.22891235351562,
    width=114.26446914672852,
    height=20.527889251708984
)

entry_10.insert(0,"10")

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=add_drone_button_clicked,
    relief="flat"
)
button_1.place(
    x=65.6343994140625,
    y=451.7420349121094,
    width=162.2008056640625,
    height=41.67659378051758
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=start_simulation_button_click,
    relief="flat"
)
button_2.place(
    x=731.0299682617188,
    y=0.888946533203125,
    width=241.04840087890625,
    height=57.44611358642578
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=stop_simulation_button_click,
    relief="flat"
)
button_3.place(
    x=977.7103881835938,
    y=3.141754150390625,
    width=235.4164276123047,
    height=57.44611358642578
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=select_waypoint_file,
    relief="flat"
)
button_4.place(
    x=254.56512451171875,
    y=223.91505432128906,
    width=20.275100708007812,
    height=18.022310256958008
)


chart_frame = Frame(window)
chart_frame.place(x=315, y=110, height=380, width=400)

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    chart_frame,
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=Start_Stop_animation,
    relief="flat"
)
button_7.place(
    x=324.0,
    y=447.7892150878906,
    width=162.2008056640625,
    height=41.67659378051758
)
button_7.pack(side=tkinter.BOTTOM)


#Initialize entry predetermined values

entry_9.insert(0,"drone0")
entry_5.insert(0,"5762")
entry_7.insert(0,"2")
entry_10.insert(0,"Select .waypoint file")
entry_6.insert(0,"20")
entry_8.insert(0,"0")
entry_4.insert(0,"1")
entry_3.insert(0,"2")
entry_2.insert(0,"200")
entry_1.insert(0,"2")


#Chart Canvas
fig = Figure(figsize=(8, 8), dpi=100)
animation_axis = fig.add_subplot(111, projection='3d')
animation_axis.set_xlim(4797581.9365282785 - 500, 4797581.9365282785 + 500)
animation_axis.set_ylim(166622.4138340809 - 500, 166622.4138340809 + 500)
animation_axis.set_zlim(4185604.1949482406 - 500, 4185604.1949482406 + 500)

chart_canvas = FigureCanvasTkAgg(fig, master=chart_frame)

toolbar = NavigationToolbar2Tk(chart_canvas,chart_frame, pack_toolbar = True)
toolbar.update()
toolbar.pack(side=tkinter.TOP, fill=tkinter.X)

chart_canvas.get_tk_widget().pack(expand=True, fill='both')




#chart_canvas.get_tk_widget().pack(side="top", fill=tkinter.BOTH, expand=1)


#Console
console_text = scrolledtext.ScrolledText(window, wrap=tkinter.WORD, height=14, width=57, bg="black", fg="white")
console_text.place(x=732, y=548)
sys.stdout =  ConsoleRedirector(console_text, "stdout")
sys.stderr = ConsoleRedirector(console_text, "stderr")

# MAP
map_widget = tkintermapview.TkinterMapView(window, width=480, height=382, corner_radius=10)
map_widget.place(x=732,y=110)

map_widget.set_position(41.2764418,1.9886541)
map_widget.set_zoom(19)
#marker.marker_color_circle = 'green'

location = [41.2764418,1.9886541] #Dronelab coord
zoom = 16
#map_widget.set_tile_server(f"https://maps.openstreetmap.org/?mlat={location[0]}&mlon={location[1]}&zoom={zoom}")

#Traces

tree_frame = Frame(window)
tree_frame.place(x=5,y=548,height=230,width=710)

tree_scroll_x = Scrollbar(tree_frame,orient='horizontal')
tree_scroll_x.pack(side="bottom", fill='x')

tree_scroll_y = Scrollbar(tree_frame)
tree_scroll_y.pack(side='right', fill='y')


tree = ttk.Treeview(tree_frame, yscrollcommand=tree_scroll_y.set, xscrollcommand=tree_scroll_x.set)
tree.pack(expand=True, fill='both') #place(x=5,y=548,height=230,width=710)
style = ttk.Style()
style.theme_use("default")
style.configure("Treeview.Heading",
                background="#708cba",
                foreground="white")
tree.heading('#0', text="\n")

tree_scroll_x.config(command=tree.xview)
tree_scroll_y.config(command=tree.yview)



if operation_mode == 'simulation':
    if connection_mode== "global":
        external_client.loop_start()
    if connection_mode== "local":
        internal_client.loop_forever()

else:
    #external_client.loop_start() #when executed on board use loop_start instead of loop_forever
    external_client.loop_forever()

window.resizable(False, False)
window.mainloop()

